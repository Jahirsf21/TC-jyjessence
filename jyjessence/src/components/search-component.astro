---
import { getCollection } from 'astro:content';
const perfumes = await getCollection('perfumes');
const categories = [...new Set(perfumes.map(p => p.data.category))];
const prices = perfumes.map(p => p.data.price);
const minPrice = Math.min(...prices);
const maxPrice = Math.max(...prices);
---

<div id="search-container">
  <button id="search-toggle" class="search-fab" aria-label="Abrir búsqueda">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="11" cy="11" r="8"></circle>
      <path d="m21 21-4.35-4.35"></path>
    </svg>
  </button>

  <div id="search-panel" class="search-panel">
    <div class="search-header">
      <h3 class="search-title">Buscar Perfumes</h3>
      <button id="search-close" class="search-close" aria-label="Cerrar búsqueda">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>

    <div class="search-content">

      <div class="search-input-group">
        <label for="search-text" class="search-label">Buscar por nombre</label>
        <input 
          type="text" 
          id="search-text" 
          class="search-input" 
          placeholder="Ej: Arabia, Odyssey..."
        />
      </div>

      <!-- Filtros -->
      <div class="filters-section">
        <h4 class="filters-title">Filtros</h4>

        <!-- Género -->
        <div class="filter-group">
          <label class="filter-label">Género</label>
          <div class="filter-options">
            <label class="filter-checkbox">
              <input type="checkbox" name="gender" value="Male" />
              <span>Masculino</span>
            </label>
            <label class="filter-checkbox">
              <input type="checkbox" name="gender" value="Female" />
              <span>Femenino</span>
            </label>
          </div>
        </div>

        <!-- Categoría -->
        <div class="filter-group">
          <label class="filter-label">Categoría</label>
          <div class="filter-options">
            {categories.map(cat => (
              <label class="filter-checkbox">
                <input type="checkbox" name="category" value={cat} />
                <span>{cat}</span>
              </label>
            ))}
          </div>
        </div>

        <!-- Rango de precio -->
        <div class="filter-group">
          <label class="filter-label">Rango de Precio</label>
          <div class="price-range">
            <div class="price-inputs">
              <input 
                type="number" 
                id="min-price" 
                class="price-input" 
                placeholder="Min"
                min={minPrice}
                max={maxPrice}
                value={minPrice}
              />
              <span class="price-separator">-</span>
              <input 
                type="number" 
                id="max-price" 
                class="price-input" 
                placeholder="Max"
                min={minPrice}
                max={maxPrice}
                value={maxPrice}
              />
            </div>
            <div class="price-labels">
              <span>₡{minPrice.toLocaleString()}</span>
              <span>₡{maxPrice.toLocaleString()}</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Botones de acción -->
      <div class="search-actions">
        <button id="clear-filters" class="btn-secondary">Limpiar Filtros</button>
        <button id="apply-filters" class="btn-primary">Aplicar</button>
      </div>

      <!-- Contador de resultados -->
      <div id="results-count" class="results-count"></div>
    </div>
  </div>
  <div id="search-overlay" class="search-overlay"></div>
</div>

<style>
  .search-fab {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: linear-gradient(#0f172a 100%);
    color: white;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 20px rgba(99, 102, 241, 0.4);
    transition: all 0.3s ease;
    z-index: 999;
  }

  .search-fab:hover,
  .search-close:hover,
  .filter-checkbox:hover,
  .btn-primary:hover,
  .btn-secondary:hover {
    background: linear-gradient(135deg, var(--color-dark) 0%, var(--color-dark2) 100%) !important;
    color: #fff !important;
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
    transform: translateY(-1px) scale(1.015);
    transition: background 0.35s, color 0.35s, transform 0.35s cubic-bezier(0.4,0,0.2,1);
  }

  .search-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .search-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  :root {
    --color-dark: #1e293b;
    --color-dark2: #0f172a;
  }
  .search-panel {
    position: fixed;
    top: 0;
    right: -450px;
    width: 450px;
    max-width: 100vw;
    height: 100vh;
    background: linear-gradient(135deg, var(--color-dark) 0%, var(--color-dark2) 100%);
    box-shadow: -4px 0 20px rgba(0, 0, 0, 0.18);
    transition: right 0.3s ease;
    z-index: 1001;
    display: flex;
    flex-direction: column;
    overflow-x: hidden;
    overflow-y: auto;
  }

  .search-panel.active {
    right: 0;
  }

  @media (max-width: 768px) {
    .search-panel {
      width: 100vw;
      right: -100vw;
    }
  }

  .search-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #222b3a;
    background: linear-gradient(135deg, var(--color-dark) 0%, var(--color-dark2) 100%);
    color: #fff;
  }

  .search-title {
    font-family: 'Playfair Display', serif;
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0;
    color: #fff;
    text-shadow: 0 2px 8px rgba(0,0,0,0.18);
  }

  .search-close {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background 0.2s ease;
  }

  .search-close:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .search-content {
    flex: 1;
    overflow-y: auto;
    overflow-x: hidden;
    padding: 1.5rem;
    background: transparent;
    color: #fff;
  }

  .search-input-group {
    margin-bottom: 2rem;
  }

  .search-label {
    display: block;
    font-size: 0.9rem;
    font-weight: 600;
    color: #fff;
    margin-bottom: 0.5rem;
    text-shadow: 0 2px 8px rgba(0,0,0,0.18);
  }

  .search-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #374151;
    border-radius: 8px;
    font-size: 1rem;
    background: #222b3a;
    color: #fff;
    transition: border-color 0.2s ease;
    box-sizing: border-box;
  }

  .search-input:focus {
    outline: none;
    border-color: #6366f1;
  }

  .filters-section {
    margin-bottom: 2rem;
  }

  .filters-title {
    font-family: 'Playfair Display', serif;
    font-size: 1.2rem;
    font-weight: 700;
    color: #fff;
    margin: 0 0 1rem 0;
    text-shadow: 0 2px 8px rgba(0,0,0,0.18);
  }

  .filter-group {
    margin-bottom: 1.5rem;
  }

  .filter-label {
    display: block;
    font-size: 0.9rem;
    font-weight: 600;
    color: #fff;
    margin-bottom: 0.75rem;
    text-shadow: 0 2px 8px rgba(0,0,0,0.18);
  }

  .filter-options {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-checkbox {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 6px;
    transition: background 0.2s ease;
  }

  .filter-checkbox:hover {
    background: #f1f5f9;
  }

  .filter-checkbox input[type="checkbox"] {
    width: 18px;
    height: 18px;
    cursor: pointer;
    accent-color: #6366f1;
  }

  .filter-checkbox span {
    font-size: 0.95rem;
    color: #fff;
    font-weight: 500;
    text-shadow: 0 2px 8px rgba(0,0,0,0.18);
  }

  .price-range {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .price-inputs {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .price-input {
    flex: 1;
    padding: 0.5rem;
    border: 2px solid #e2e8f0;
    border-radius: 6px;
    font-size: 0.9rem;
    box-sizing: border-box;
    min-width: 0;
  }

  .price-input:focus {
    outline: none;
    border-color: #6366f1;
  }

  .price-separator {
    color: #64748b;
    font-weight: 600;
  }

  .price-labels {
    display: flex;
    justify-content: space-between;
    font-size: 0.85rem;
    color: #64748b;
  }

  .search-actions {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }

  .btn-primary,
  .btn-secondary {
    flex: 1;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 8px;
    font-size: 0.95rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-primary {
    background: linear-gradient(135deg, var(--color-dark) 0%, var(--color-dark2) 100%);
    color: #fff;
    border: 1px solid #374151;
    box-shadow: 0 2px 8px rgba(0,0,0,0.18);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
  }

  .btn-secondary {
    background: #222b3a;
    color: #fff;
    border: 1px solid #374151;
    font-weight: 600;
    box-shadow: 0 1px 4px rgba(0,0,0,0.12);
  }

  .btn-secondary:hover {
    background: #e2e8f0;
  }

  .results-count {
    text-align: center;
    padding: 1rem;
    background: #222b3a;
    border-radius: 8px;
    font-size: 0.95rem;
    color: #fff;
    font-weight: 600;
    box-shadow: 0 1px 4px rgba(0,0,0,0.12);
  }
</style>

<script>
  // Toggle panel
  const toggleBtn = document.getElementById('search-toggle');
  const closeBtn = document.getElementById('search-close');
  const panel = document.getElementById('search-panel');
  const overlay = document.getElementById('search-overlay');

  function openSearch() {
    panel?.classList.add('active');
    overlay?.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function closeSearch() {
    panel?.classList.remove('active');
    overlay?.classList.remove('active');
    document.body.style.overflow = '';
  }

  toggleBtn?.addEventListener('click', openSearch);
  closeBtn?.addEventListener('click', closeSearch);
  overlay?.addEventListener('click', closeSearch);

  // Filtrado
  const searchInput = document.getElementById('search-text') as HTMLInputElement;
  const minPriceInput = document.getElementById('min-price') as HTMLInputElement;
  const maxPriceInput = document.getElementById('max-price') as HTMLInputElement;
  const applyBtn = document.getElementById('apply-filters');
  const clearBtn = document.getElementById('clear-filters');
  const resultsCount = document.getElementById('results-count');

  function applyFilters() {
    const searchText = searchInput?.value.toLowerCase() || '';
    const minPrice = parseInt(minPriceInput?.value || '0');
    const maxPrice = parseInt(maxPriceInput?.value || '999999');
    
    const selectedGenders = Array.from(
      document.querySelectorAll('input[name="gender"]:checked')
    ).map((input: any) => input.value);
    
    const selectedCategories = Array.from(
      document.querySelectorAll('input[name="category"]:checked')
    ).map((input: any) => input.value);

    const sections = document.querySelectorAll('section[class*="section-"]');
    let visibleCount = 0;

    sections.forEach((section) => {
      const title = section.querySelector('h2')?.textContent?.toLowerCase() || '';
      const category = section.querySelector('.perfume-category')?.textContent || '';
      const priceText = section.querySelector('.perfume-price')?.textContent || '';
      const price = parseInt(priceText.replace(/[^0-9]/g, ''));
      

      const gender = section.getAttribute('data-gender') || '';

      let visible = true;

      // Filtro de texto
      if (searchText && !title.includes(searchText)) {
        visible = false;
      }

      // Filtro de género
      if (selectedGenders.length > 0 && !selectedGenders.includes(gender)) {
        visible = false;
      }

      // Filtro de categoría
      if (selectedCategories.length > 0 && !selectedCategories.includes(category)) {
        visible = false;
      }

      // Filtro de precio
      if (price < minPrice || price > maxPrice) {
        visible = false;
      }

      if (visible) {
        (section as HTMLElement).style.display = '';
        visibleCount++;
      } else {
        (section as HTMLElement).style.display = 'none';
      }
    });

    if (resultsCount) {
      resultsCount.textContent = `${visibleCount} perfume${visibleCount !== 1 ? 's' : ''} encontrado${visibleCount !== 1 ? 's' : ''}`;
    }

    closeSearch();
  }

  function clearFilters() {
    if (searchInput) searchInput.value = '';
    if (minPriceInput) minPriceInput.value = minPriceInput.min;
    if (maxPriceInput) maxPriceInput.value = maxPriceInput.max;
    
    document.querySelectorAll('input[type="checkbox"]').forEach((checkbox: any) => {
      checkbox.checked = false;
    });

    const sections = document.querySelectorAll('section[class*="section-"]');
    sections.forEach((section) => {
      (section as HTMLElement).style.display = '';
    });

    if (resultsCount) {
      resultsCount.textContent = '';
    }
  }

  applyBtn?.addEventListener('click', applyFilters);
  clearBtn?.addEventListener('click', clearFilters);

  // Aplicar filtros al presionar Enter en el buscador
  searchInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      applyFilters();
    }
  });
</script>